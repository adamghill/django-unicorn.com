:py:mod:`django_unicorn.typer`
==============================

.. py:module:: django_unicorn.typer


Module Contents
---------------

.. py:function:: get_args(type_hint)


.. py:data:: type_hints_cache

   

.. py:data:: function_signature_cache

   

.. py:data:: CASTERS

   

.. py:function:: get_type_hints(obj) -> Dict

   Get type hints from an object. These get cached in a local memory cache for quicker look-up later.

   :returns: An empty dictionary if no type hints can be retrieved.


.. py:function:: cast_value(type_hint, value)

   Try to cast the value based on the type hint and
   `django_unicorn.call_method_parser.CASTERS`.

   Additional features:
   - convert `int`/`float` epoch to `datetime` or `date`
   - instantiate the `type_hint` class with passed-in value


.. py:function:: cast_attribute_value(obj, name, value)

   Try to cast the value of an object's attribute based on the type hint.


.. py:function:: get_method_arguments(func) -> List[str]

   Gets the arguments for a method.

   :returns: A list of strings, one for each argument.


.. py:function:: is_queryset(obj, type_hint, value)

   Determines whether an obj is a `QuerySet` or not based on the current instance of the
   component or the type hint.


.. py:function:: create_queryset(obj, type_hint, value) -> django.db.models.QuerySet

   Create a queryset based on the `value`. If needed, the queryset will be created based on the `QuerySetType`.

   For example, all of these ways fields are equivalent:

   class TestComponent(UnicornView):
       queryset_with_empty_list: QuerySetType[SomeModel] = []
       queryset_with_none: QuerySetType[SomeModel] = None
       queryset_with_empty_queryset: QuerySetType[SomeModel] = SomeModel.objects.none()
       queryset_with_no_typehint = SomeModel.objects.none()

   Params:
       obj: Object.
       type_hint: The optional type hint for the field.
       value: JSON.


