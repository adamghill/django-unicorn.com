:py:mod:`django_unicorn.serializer`
===================================

.. py:module:: django_unicorn.serializer


Module Contents
---------------

.. py:data:: PydanticBaseModel

   

.. py:data:: django_json_encoder

   

.. py:exception:: JSONDecodeError


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:exception:: InvalidFieldNameError(field_name: str, data: Optional[Dict] = None)


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:exception:: InvalidFieldAttributeError(field_name: str, field_attr: str, data: Optional[Dict] = None)


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:function:: dumps(data: Dict, *, fix_floats: bool = True, exclude_field_attributes: Optional[Tuple[str, Ellipsis]] = None, sort_dict: bool = True) -> str

   Converts the passed-in dictionary to a string representation.

   Handles the following objects: dataclass, datetime, enum, float, int, numpy, str, uuid,
   Django Model, Django QuerySet, Pydantic models (`PydanticBaseModel`), any object with `to_json` method.

   :param param fix_floats: Whether any floats should be converted to strings. Defaults to `True`,
                            but will be faster without it.
   :param param exclude_field_attributes: Tuple of strings with field attributes to remove, i.e. "1.2"
                                          to remove the key `2` from `{"1": {"2": "3"}}`
   :param param sort_dict: Whether the `dict` should be sorted. Defaults to `True`, but
                           will be faster without it.

   Returns a `str` instead of `bytes` (which deviates from `orjson.dumps`), but seems more useful.


.. py:function:: loads(string: str) -> dict

   Converts a string representation to dictionary.


.. py:function:: model_value(model: django.db.models.Model, *fields: str)

   Serializes a model into a dictionary with the fields as specified in the `fields` argument.


